L 1 "core\malloc.c"
N#include "malloc.h"	    
L 1 "core\malloc.h" 1
N#ifndef __MALLOC_H
N#define __MALLOC_H
N//////////////////////////////////////////////////////////////////////////////////	 
N//本程序只供学习使用，未经作者许可，不得用于其它任何用途
N//ALIENTEK战舰STM32开发板
N//内存管理 驱动代码	   
N//正点原子@ALIENTEK
N//技术论坛:www.openedv.com
N//修改日期:2012/9/16
N//版本：V1.0
N//版权所有，盗版必究。
N//Copyright(C) 广州市星翼电子科技有限公司 2009-2019
N//All rights reserved									  
N//////////////////////////////////////////////////////////////////////////////////
N
N
Ntypedef unsigned long  u32;
Ntypedef unsigned short u16;
Ntypedef unsigned char  u8;	  
N#ifndef NULL
N#define NULL 0
N#endif
N
N#define SRAMIN	0	//内部内存池
N#define SRAMEX  1	//外部内存池
N
N
N//mem1内存参数设定.mem1完全处于内部SRAM里面
N#define MEM1_BLOCK_SIZE			32  	  						//内存块大小为32字节
N#define MEM1_MAX_SIZE			40*1024  						//最大管理内存 40K
N#define MEM1_ALLOC_TABLE_SIZE	MEM1_MAX_SIZE/MEM1_BLOCK_SIZE 	//内存表大小
N
N//mem2内存参数设定.mem2的内存池处于外部SRAM里面,其他的处于内部SRAM里面
N#define MEM2_BLOCK_SIZE			32  	  						//内存块大小为32字节
N#define MEM2_MAX_SIZE			200*1024  						//最大管理内存200K
N#define MEM2_ALLOC_TABLE_SIZE	MEM2_MAX_SIZE/MEM2_BLOCK_SIZE 	//内存表大小
N		 
N		 
N//内存管理控制器
Nstruct _m_mallco_dev
N{
N	void (*init)(u8);					//初始化
N	u8 (*perused)(u8);		  	    	//内存使用率
N	u8 	*membase[2];					//内存池 管理2个区域的内存
N	u16 *memmap[2]; 					//内存管理状态表
N	u8  memrdy[2]; 						//内存管理是否就绪
N};
Nextern struct _m_mallco_dev mallco_dev;	 //在mallco.c里面定义
N
Nvoid mymemset(void *s,u8 c,u32 count);	 //设置内存
Nvoid mymemcpy(void *des,void *src,u32 n);//复制内存     
Nvoid mem_init(u8 memx);					 //内存管理初始化函数(外/内部调用)
Nu32 mem_malloc(u8 memx,u32 size);		 //内存分配(内部调用)
Nu8 mem_free(u8 memx,u32 offset);		 //内存释放(内部调用)
Nu8 mem_perused(u8 memx);				 //获得内存使用率(外/内部调用) 
N////////////////////////////////////////////////////////////////////////////////
N//用户调用函数
Nvoid myfree(u8 memx,void *ptr);  			//内存释放(外部调用)
Nvoid *mymalloc(u8 memx,u32 size);			//内存分配(外部调用)
Nvoid *myrealloc(u8 memx,void *ptr,u32 size);//重新分配内存(外部调用)
N#endif
N
N
N
N
N
N
N
N
N
N
N
N
N
L 2 "core\malloc.c" 2
N
N//内存池(4字节对齐)
N__align(4) u8 mem1base[MEM1_MAX_SIZE];													//内部SRAM内存池
X__align(4) u8 mem1base[40*1024];													
N__align(4) u8 mem2base[MEM2_MAX_SIZE] __attribute__((at(0X68000000)));					//外部SRAM内存池
X__align(4) u8 mem2base[200*1024] __attribute__((at(0X68000000)));					
N//内存管理表
Nu16 mem1mapbase[MEM1_ALLOC_TABLE_SIZE];													//内部SRAM内存池MAP
Xu16 mem1mapbase[40*1024/32];													
Nu16 mem2mapbase[MEM2_ALLOC_TABLE_SIZE] __attribute__((at(0X68000000+MEM2_MAX_SIZE)));	//外部SRAM内存池MAP
Xu16 mem2mapbase[200*1024/32] __attribute__((at(0X68000000+200*1024)));	
N//内存管理参数	   
Nconst u32 memtblsize[2]={MEM1_ALLOC_TABLE_SIZE,MEM2_ALLOC_TABLE_SIZE};		//内存表大小
Xconst u32 memtblsize[2]={40*1024/32,200*1024/32};		
Nconst u32 memblksize[2]={MEM1_BLOCK_SIZE,MEM2_BLOCK_SIZE};					//内存分块大小
Xconst u32 memblksize[2]={32,32};					
Nconst u32 memsize[2]={MEM1_MAX_SIZE,MEM2_MAX_SIZE};							//内存总大小
Xconst u32 memsize[2]={40*1024,200*1024};							
N
N
N//内存管理控制器
Nstruct _m_mallco_dev mallco_dev=
N{
N	mem_init,				//内存初始化
N	mem_perused,			//内存使用率
N	mem1base,mem2base,		//内存池
N	mem1mapbase,mem2mapbase,//内存管理状态表
N	0,0,  					//内存管理未就绪
N};
N
N//复制内存
N//*des:目的地址
N//*src:源地址
N//n:需要复制的内存长度(字节为单位)
Nvoid mymemcpy(void *des,void *src,u32 n)  
N{  
N    u8 *xdes=des;
N	u8 *xsrc=src; 
N    while(n--)*xdes++=*xsrc++;  
N}  
N//设置内存
N//*s:内存首地址
N//c :要设置的值
N//count:需要设置的内存大小(字节为单位)
Nvoid mymemset(void *s,u8 c,u32 count)  
N{  
N    u8 *xs = s;  
N    while(count--)*xs++=c;  
N}	   
N//内存管理初始化  
N//memx:所属内存块
Nvoid mem_init(u8 memx)  
N{  
N    mymemset(mallco_dev.memmap[memx], 0,memtblsize[memx]*2);//内存状态表数据清零  
N	mymemset(mallco_dev.membase[memx], 0,memsize[memx]);	//内存池所有数据清零  
N	mallco_dev.memrdy[memx]=1;								//内存管理初始化OK  
N}  
N//获取内存使用率
N//memx:所属内存块
N//返回值:使用率(0~100)
Nu8 mem_perused(u8 memx)  
N{  
N    u32 used=0;  
N    u32 i;  
N    for(i=0;i<memtblsize[memx];i++)  
N    {  
N        if(mallco_dev.memmap[memx][i])used++; 
N    } 
N    return (used*100)/(memtblsize[memx]);  
N}  
N//内存分配(内部调用)
N//memx:所属内存块
N//size:要分配的内存大小(字节)
N//返回值:0XFFFFFFFF,代表错误;其他,内存偏移地址 
Nu32 mem_malloc(u8 memx,u32 size)  
N{  
N    signed long offset=0;  
N    u16 nmemb;	//需要的内存块数  
N	u16 cmemb=0;//连续空内存块数
N    u32 i;  
N    if(!mallco_dev.memrdy[memx])mallco_dev.init(memx);//未初始化,先执行初始化 
N    if(size==0)return 0XFFFFFFFF;//不需要分配
N    nmemb=size/memblksize[memx];  	//获取需要分配的连续内存块数
N    if(size%memblksize[memx])nmemb++;  
N    for(offset=memtblsize[memx]-1;offset>=0;offset--)//搜索整个内存控制区  
N    {     
N		if(!mallco_dev.memmap[memx][offset])cmemb++;//连续空内存块数增加
N		else cmemb=0;								//连续内存块清零
N		if(cmemb==nmemb)							//找到了连续nmemb个空内存块
N		{
N            for(i=0;i<nmemb;i++)  					//标注内存块非空 
N            {  
N                mallco_dev.memmap[memx][offset+i]=nmemb;  
N            }  
N            return (offset*memblksize[memx]);//返回偏移地址  
N		}
N    }  
N    return 0XFFFFFFFF;//未找到符合分配条件的内存块  
N}  
N//释放内存(内部调用) 
N//memx:所属内存块
N//offset:内存地址偏移
N//返回值:0,释放成功;1,释放失败;  
Nu8 mem_free(u8 memx,u32 offset)  
N{  
N    int i;  
N    if(!mallco_dev.memrdy[memx])//未初始化,先执行初始化
N	{
N		mallco_dev.init(memx);    
N        return 1;//未初始化  
N    }  
N    if(offset<memsize[memx])//偏移在内存池内. 
N    {  
N        int index=offset/memblksize[memx];			//偏移所在内存块号码  
N        int nmemb=mallco_dev.memmap[memx][index];	//内存块数量
N        for(i=0;i<nmemb;i++)  						//内存块清零
N        {  
N            mallco_dev.memmap[memx][index+i]=0;  
N        }  
N        return 0;  
N    }else return 2;//偏移超区了.  
N}  
N//释放内存(外部调用) 
N//memx:所属内存块
N//ptr:内存首地址 
Nvoid myfree(u8 memx,void *ptr)  
N{  
N	u32 offset;  
N    if(ptr==NULL)return;//地址为0.  
X    if(ptr==0)return;
N 	offset=(u32)ptr-(u32)mallco_dev.membase[memx];  
N    mem_free(memx,offset);//释放内存     
N}  
N//分配内存(外部调用)
N//memx:所属内存块
N//size:内存大小(字节)
N//返回值:分配到的内存首地址.
Nvoid *mymalloc(u8 memx,u32 size)  
N{  
N    u32 offset;  									      
N	offset=mem_malloc(memx,size);  	   				   
N    if(offset==0XFFFFFFFF)return NULL;  
X    if(offset==0XFFFFFFFF)return 0;  
N    else return (void*)((u32)mallco_dev.membase[memx]+offset);  
N}  
N//重新分配内存(外部调用)
N//memx:所属内存块
N//*ptr:旧内存首地址
N//size:要分配的内存大小(字节)
N//返回值:新分配到的内存首地址.
Nvoid *myrealloc(u8 memx,void *ptr,u32 size)  
N{  
N    u32 offset;  
N    offset=mem_malloc(memx,size);  
N    if(offset==0XFFFFFFFF)return NULL;     
X    if(offset==0XFFFFFFFF)return 0;     
N    else  
N    {  									   
N	    mymemcpy((void*)((u32)mallco_dev.membase[memx]+offset),ptr,size);	//拷贝旧内存内容到新内存   
N        myfree(memx,ptr);  											  		//释放旧内存
N        return (void*)((u32)mallco_dev.membase[memx]+offset);  				//返回新内存首地址
N    }  
N}
N
N
N
N
N
N
N
N
N
N
N
N
