; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jpstm32_sysclk.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\jpstm32_sysclk.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\core -I.\devices -I.\app -I.\boot -I.\app\RES\Num -I.\app\RES\Pic -I"D:\Program Files\Keil\ARM\RV31\INC" -I"D:\Program Files\Keil\ARM\CMSIS\Include" -I"D:\Program Files\Keil\ARM\Inc\ST\STM32F10x" --omf_browse=.\obj\jpstm32_sysclk.crf core\jpstm32_sysclk.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rcc_reset PROC
;;;13     //时钟寄存器初始化
;;;14     static void rcc_reset(void)
000000  b510              PUSH     {r4,lr}
;;;15     {
;;;16     	RCC->APB1RSTR	= 0x00000000;
000002  2000              MOVS     r0,#0
000004  4935              LDR      r1,|L1.220|
000006  6108              STR      r0,[r1,#0x10]
;;;17     	RCC->APB2RSTR = 0x00000000;
000008  60c8              STR      r0,[r1,#0xc]
;;;18     	//睡眠模式闪存和SRAM时钟使能，其他关闭
;;;19     	RCC->AHBENR 	= 0x00000014;
00000a  2014              MOVS     r0,#0x14
00000c  6148              STR      r0,[r1,#0x14]
;;;20     	//外设时钟关闭
;;;21     	RCC->APB2ENR 	= 0x00000000;
00000e  2000              MOVS     r0,#0
000010  6188              STR      r0,[r1,#0x18]
;;;22     	RCC->APB1ENR 	= 0x00000000;
000012  61c8              STR      r0,[r1,#0x1c]
;;;23     	//使能内部高速时钟
;;;24     	RCC->CR 	|= 0x00000001;
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]
000018  f0400001          ORR      r0,r0,#1
00001c  6008              STR      r0,[r1,#0]
;;;25     	//复位SW[1:0],HPRE[3:0],PPRE1[2:0],PPRE2[2:0]
;;;26     	//ADCPRE[1:0],MCO[2:0]	
;;;27     	RCC->CFGR &= 0xF8FF0000;
00001e  4608              MOV      r0,r1
000020  6840              LDR      r0,[r0,#4]
000022  492f              LDR      r1,|L1.224|
000024  4008              ANDS     r0,r0,r1
000026  492d              LDR      r1,|L1.220|
000028  6048              STR      r0,[r1,#4]
;;;28     	//复位HSEON，CSSON，PLLON
;;;29     	RCC->CR 	&= 0xFEF6FFFF;
00002a  4608              MOV      r0,r1
00002c  6800              LDR      r0,[r0,#0]
00002e  492d              LDR      r1,|L1.228|
000030  4008              ANDS     r0,r0,r1
000032  492a              LDR      r1,|L1.220|
000034  6008              STR      r0,[r1,#0]
;;;30     	//复位HSEBYP
;;;31     	RCC->CR 	&= 0xFFFBFFFF;	 
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]
00003a  f4202080          BIC      r0,r0,#0x40000
00003e  6008              STR      r0,[r1,#0]
;;;32     	//复位PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE 
;;;33     	RCC->CFGR &= 0xFF80FFFF;   
000040  4608              MOV      r0,r1
000042  6840              LDR      r0,[r0,#4]
000044  f42000fe          BIC      r0,r0,#0x7f0000
000048  6048              STR      r0,[r1,#4]
;;;34     	RCC->CIR 	= 0x00000000; 
00004a  2000              MOVS     r0,#0
00004c  6088              STR      r0,[r1,#8]
;;;35     	//配置异常向量表
;;;36     	select_nvic_vector(NVIC_VectTab_FLASH, 0x0);
00004e  2100              MOVS     r1,#0
000050  f04f6000          MOV      r0,#0x8000000
000054  f7fffffe          BL       select_nvic_vector
;;;37     }
000058  bd10              POP      {r4,pc}
;;;38     
                          ENDP

                  clk_init PROC
;;;48      * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
;;;49     extern void clk_init(u8 PLL)
00005a  b570              PUSH     {r4-r6,lr}
;;;50     {
00005c  4604              MOV      r4,r0
;;;51     	u8	temp = 0;
00005e  2500              MOVS     r5,#0
;;;52     	rcc_reset();//复位时钟并配置异常向量表
000060  f7fffffe          BL       rcc_reset
;;;53     	RCC->CR |= 0x00010000;//外部高速时钟使能
000064  481d              LDR      r0,|L1.220|
000066  6800              LDR      r0,[r0,#0]
000068  f4403080          ORR      r0,r0,#0x10000
00006c  491b              LDR      r1,|L1.220|
00006e  6008              STR      r0,[r1,#0]
;;;54     	while(!(RCC->CR>>17));//等待外部时钟就绪
000070  bf00              NOP      
                  |L1.114|
000072  481a              LDR      r0,|L1.220|
000074  6800              LDR      r0,[r0,#0]
000076  0c40              LSRS     r0,r0,#17
000078  d0fb              BEQ      |L1.114|
;;;55     	//HCLK 2分频
;;;56     	RCC->CFGR = 0x00000400;
00007a  f44f6080          MOV      r0,#0x400
00007e  4917              LDR      r1,|L1.220|
000080  6048              STR      r0,[r1,#4]
;;;57     	PLL -= 2;
000082  1ea0              SUBS     r0,r4,#2
000084  b2c4              UXTB     r4,r0
;;;58     	//PLL 9倍频输出-->72MHz
;;;59     	RCC->CFGR 	|= PLL<<18;
000086  4608              MOV      r0,r1
000088  6840              LDR      r0,[r0,#4]
00008a  ea404084          ORR      r0,r0,r4,LSL #18
00008e  6048              STR      r0,[r1,#4]
;;;60     	//HSE时钟作为PLL输出
;;;61     	RCC->CFGR 	|= 1<<16;
000090  4608              MOV      r0,r1
000092  6840              LDR      r0,[r0,#4]
000094  f4403080          ORR      r0,r0,#0x10000
000098  6048              STR      r0,[r1,#4]
;;;62     	
;;;63     	FLASH->ACR 	|= 0x32;
00009a  4813              LDR      r0,|L1.232|
00009c  6800              LDR      r0,[r0,#0]
00009e  f0400032          ORR      r0,r0,#0x32
0000a2  4911              LDR      r1,|L1.232|
0000a4  6008              STR      r0,[r1,#0]
;;;64     	//开启倍频
;;;65     	RCC->CR 		|= 0x01000000;
0000a6  480d              LDR      r0,|L1.220|
0000a8  6800              LDR      r0,[r0,#0]
0000aa  f0407080          ORR      r0,r0,#0x1000000
0000ae  490b              LDR      r1,|L1.220|
0000b0  6008              STR      r0,[r1,#0]
;;;66     	//等待PLL锁定
;;;67     	while(!(RCC->CR>>25));
0000b2  bf00              NOP      
                  |L1.180|
0000b4  4809              LDR      r0,|L1.220|
0000b6  6800              LDR      r0,[r0,#0]
0000b8  0e40              LSRS     r0,r0,#25
0000ba  d0fb              BEQ      |L1.180|
;;;68     	//设置PLL为当前系统时钟
;;;69     	RCC->CFGR |=0x00000002;
0000bc  4807              LDR      r0,|L1.220|
0000be  6840              LDR      r0,[r0,#4]
0000c0  f0400002          ORR      r0,r0,#2
0000c4  4905              LDR      r1,|L1.220|
0000c6  6048              STR      r0,[r1,#4]
;;;70     	while(temp != 0x02){//等待PLL设置成功
0000c8  e005              B        |L1.214|
                  |L1.202|
;;;71     		temp = RCC->CFGR>>2;
0000ca  4804              LDR      r0,|L1.220|
0000cc  6840              LDR      r0,[r0,#4]
0000ce  f3c00587          UBFX     r5,r0,#2,#8
;;;72     		temp &= 0x03;
0000d2  f0050503          AND      r5,r5,#3
                  |L1.214|
0000d6  2d02              CMP      r5,#2                 ;70
0000d8  d1f7              BNE      |L1.202|
;;;73     	}	
;;;74     }
0000da  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.220|
                          DCD      0x40021000
                  |L1.224|
                          DCD      0xf8ff0000
                  |L1.228|
                          DCD      0xfef6ffff
                  |L1.232|
                          DCD      0x40022000
