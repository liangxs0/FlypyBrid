; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\24cxx.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\24cxx.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\core -I.\devices -I.\app -I.\boot -I.\app\RES\Num -I.\app\RES\Pic -I"D:\Program Files\Keil\ARM\RV31\INC" -I"D:\Program Files\Keil\ARM\CMSIS\Include" -I"D:\Program Files\Keil\ARM\Inc\ST\STM32F10x" --omf_browse=.\obj\24cxx.crf devices\24cxx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  AT24CXX_Init PROC
;;;17     //初始化IIC接口
;;;18     void AT24CXX_Init(void)
000000  b510              PUSH     {r4,lr}
;;;19     {
;;;20     	IIC_Init();
000002  f7fffffe          BL       IIC_Init
;;;21     }
000006  bd10              POP      {r4,pc}
;;;22     //在AT24CXX指定地址读出一个数据
                          ENDP

                  AT24CXX_ReadOneByte PROC
;;;24     //返回值  :读到的数据
;;;25     u8 AT24CXX_ReadOneByte(u16 ReadAddr)
000008  b570              PUSH     {r4-r6,lr}
;;;26     {				  
00000a  4604              MOV      r4,r0
;;;27     	u8 temp=0;		  	    																 
00000c  2600              MOVS     r6,#0
;;;28         IIC_Start();  
00000e  f7fffffe          BL       IIC_Start
;;;29     	IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据 	   
000012  4625              MOV      r5,r4
000014  17e1              ASRS     r1,r4,#31
000016  eb046111          ADD      r1,r4,r1,LSR #24
00001a  1209              ASRS     r1,r1,#8
00001c  22a0              MOVS     r2,#0xa0
00001e  eb020141          ADD      r1,r2,r1,LSL #1
000022  b2c8              UXTB     r0,r1
000024  f7fffffe          BL       IIC_Send_Byte
;;;30     	IIC_Wait_Ack(); 
000028  f7fffffe          BL       IIC_Wait_Ack
;;;31         IIC_Send_Byte(ReadAddr%256);   //发送低地址
00002c  17e1              ASRS     r1,r4,#31
00002e  eb046111          ADD      r1,r4,r1,LSR #24
000032  1209              ASRS     r1,r1,#8
000034  eba42101          SUB      r1,r4,r1,LSL #8
000038  b2c8              UXTB     r0,r1
00003a  f7fffffe          BL       IIC_Send_Byte
;;;32     	IIC_Wait_Ack();
00003e  f7fffffe          BL       IIC_Wait_Ack
;;;33     	IIC_Start();  	 	   
000042  f7fffffe          BL       IIC_Start
;;;34     	IIC_Send_Byte(0XA1);           //进入接收模式			   
000046  20a1              MOVS     r0,#0xa1
000048  f7fffffe          BL       IIC_Send_Byte
;;;35     	IIC_Wait_Ack();	 
00004c  f7fffffe          BL       IIC_Wait_Ack
;;;36         temp=IIC_Read_Byte(0);		   
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       IIC_Read_Byte
000056  4606              MOV      r6,r0
;;;37         IIC_Stop();//产生一个停止条件	    
000058  f7fffffe          BL       IIC_Stop
;;;38     	return temp;
00005c  4630              MOV      r0,r6
;;;39     }
00005e  bd70              POP      {r4-r6,pc}
;;;40     //在AT24CXX指定地址写入一个数据
                          ENDP

                  AT24CXX_WriteOneByte PROC
;;;42     //DataToWrite:要写入的数据
;;;43     void AT24CXX_WriteOneByte(u16 WriteAddr,u8 DataToWrite)
000060  b570              PUSH     {r4-r6,lr}
;;;44     {				   	  	    																 
000062  4604              MOV      r4,r0
000064  460e              MOV      r6,r1
;;;45         IIC_Start();  
000066  f7fffffe          BL       IIC_Start
;;;46     	IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据 	 
00006a  4625              MOV      r5,r4
00006c  17e1              ASRS     r1,r4,#31
00006e  eb046111          ADD      r1,r4,r1,LSR #24
000072  1209              ASRS     r1,r1,#8
000074  22a0              MOVS     r2,#0xa0
000076  eb020141          ADD      r1,r2,r1,LSL #1
00007a  b2c8              UXTB     r0,r1
00007c  f7fffffe          BL       IIC_Send_Byte
;;;47     	IIC_Wait_Ack();	   
000080  f7fffffe          BL       IIC_Wait_Ack
;;;48         IIC_Send_Byte(WriteAddr%256);   //发送低地址
000084  17e1              ASRS     r1,r4,#31
000086  eb046111          ADD      r1,r4,r1,LSR #24
00008a  1209              ASRS     r1,r1,#8
00008c  eba42101          SUB      r1,r4,r1,LSL #8
000090  b2c8              UXTB     r0,r1
000092  f7fffffe          BL       IIC_Send_Byte
;;;49     	IIC_Wait_Ack(); 	 										  		   
000096  f7fffffe          BL       IIC_Wait_Ack
;;;50     	IIC_Send_Byte(DataToWrite);     //发送字节							   
00009a  4630              MOV      r0,r6
00009c  f7fffffe          BL       IIC_Send_Byte
;;;51     	IIC_Wait_Ack();  		    	   
0000a0  f7fffffe          BL       IIC_Wait_Ack
;;;52         IIC_Stop();//产生一个停止条件 
0000a4  f7fffffe          BL       IIC_Stop
;;;53     	_delay_ms(10);	 
0000a8  200a              MOVS     r0,#0xa
0000aa  f7fffffe          BL       _delay_ms
;;;54     }
0000ae  bd70              POP      {r4-r6,pc}
;;;55     //在AT24CXX里面的指定地址开始写入长度为Len的数据
                          ENDP

                  AT24CXX_WriteLenByte PROC
;;;59     //Len        :要写入数据的长度2,4
;;;60     void AT24CXX_WriteLenByte(u16 WriteAddr,u32 DataToWrite,u8 Len)
0000b0  e92d41f0          PUSH     {r4-r8,lr}
;;;61     {  	
0000b4  4605              MOV      r5,r0
0000b6  460e              MOV      r6,r1
0000b8  4617              MOV      r7,r2
;;;62     	u8 t;
;;;63     	for(t=0;t<Len;t++)
0000ba  2400              MOVS     r4,#0
0000bc  e009              B        |L1.210|
                  |L1.190|
;;;64     	{
;;;65     		AT24CXX_WriteOneByte(WriteAddr+t,(DataToWrite>>(8*t))&0xff);
0000be  00e2              LSLS     r2,r4,#3
0000c0  fa26f202          LSR      r2,r6,r2
0000c4  b2d1              UXTB     r1,r2
0000c6  192a              ADDS     r2,r5,r4
0000c8  b290              UXTH     r0,r2
0000ca  f7fffffe          BL       AT24CXX_WriteOneByte
0000ce  1c60              ADDS     r0,r4,#1              ;63
0000d0  b2c4              UXTB     r4,r0                 ;63
                  |L1.210|
0000d2  42bc              CMP      r4,r7                 ;63
0000d4  dbf3              BLT      |L1.190|
;;;66     	}												    
;;;67     }
0000d6  e8bd81f0          POP      {r4-r8,pc}
;;;68     
                          ENDP

                  AT24CXX_ReadLenByte PROC
;;;73     //Len        :要读出数据的长度2,4
;;;74     u32 AT24CXX_ReadLenByte(u16 ReadAddr,u8 Len)
0000da  e92d41f0          PUSH     {r4-r8,lr}
;;;75     {  	
0000de  4607              MOV      r7,r0
0000e0  460c              MOV      r4,r1
;;;76     	u8 t;
;;;77     	u32 temp=0;
0000e2  2600              MOVS     r6,#0
;;;78     	for(t=0;t<Len;t++)
0000e4  2500              MOVS     r5,#0
0000e6  e009              B        |L1.252|
                  |L1.232|
;;;79     	{
;;;80     		temp<<=8;
0000e8  0236              LSLS     r6,r6,#8
;;;81     		temp+=AT24CXX_ReadOneByte(ReadAddr+Len-t-1); 	 				   
0000ea  1939              ADDS     r1,r7,r4
0000ec  1b49              SUBS     r1,r1,r5
0000ee  1e49              SUBS     r1,r1,#1
0000f0  b288              UXTH     r0,r1
0000f2  f7fffffe          BL       AT24CXX_ReadOneByte
0000f6  4406              ADD      r6,r6,r0
0000f8  1c68              ADDS     r0,r5,#1              ;78
0000fa  b2c5              UXTB     r5,r0                 ;78
                  |L1.252|
0000fc  42a5              CMP      r5,r4                 ;78
0000fe  dbf3              BLT      |L1.232|
;;;82     	}
;;;83     	return temp;												    
000100  4630              MOV      r0,r6
;;;84     }
000102  e8bd81f0          POP      {r4-r8,pc}
;;;85     //检查AT24CXX是否正常
                          ENDP

                  AT24CXX_Check PROC
;;;89     //返回0:检测成功
;;;90     u8 AT24CXX_Check(void)
000106  b510              PUSH     {r4,lr}
;;;91     {
;;;92     	u8 temp;
;;;93     	temp=AT24CXX_ReadOneByte(255);//避免每次开机都写AT24CXX			   
000108  20ff              MOVS     r0,#0xff
00010a  f7fffffe          BL       AT24CXX_ReadOneByte
00010e  4604              MOV      r4,r0
;;;94     	if(temp==0X55)return 0;		   
000110  2c55              CMP      r4,#0x55
000112  d101              BNE      |L1.280|
000114  2000              MOVS     r0,#0
                  |L1.278|
;;;95     	else//排除第一次初始化的情况
;;;96     	{
;;;97     		AT24CXX_WriteOneByte(255,0X55);
;;;98     	    temp=AT24CXX_ReadOneByte(255);	  
;;;99     		if(temp==0X55)return 0;
;;;100    	}
;;;101    	return 1;											  
;;;102    }
000116  bd10              POP      {r4,pc}
                  |L1.280|
000118  2155              MOVS     r1,#0x55              ;97
00011a  20ff              MOVS     r0,#0xff              ;97
00011c  f7fffffe          BL       AT24CXX_WriteOneByte
000120  20ff              MOVS     r0,#0xff              ;98
000122  f7fffffe          BL       AT24CXX_ReadOneByte
000126  4604              MOV      r4,r0                 ;98
000128  2c55              CMP      r4,#0x55              ;99
00012a  d101              BNE      |L1.304|
00012c  2000              MOVS     r0,#0                 ;99
00012e  e7f2              B        |L1.278|
                  |L1.304|
000130  2001              MOVS     r0,#1                 ;101
000132  e7f0              B        |L1.278|
;;;103    
                          ENDP

                  AT24CXX_Read PROC
;;;107    //NumToRead:要读出数据的个数
;;;108    void AT24CXX_Read(u16 ReadAddr,u8 *pBuffer,u16 NumToRead)
000134  b570              PUSH     {r4-r6,lr}
;;;109    {
000136  4606              MOV      r6,r0
000138  460c              MOV      r4,r1
00013a  4615              MOV      r5,r2
;;;110    	while(NumToRead)
00013c  e008              B        |L1.336|
                  |L1.318|
;;;111    	{
;;;112    		*pBuffer++=AT24CXX_ReadOneByte(ReadAddr++);	
00013e  4630              MOV      r0,r6
000140  1c72              ADDS     r2,r6,#1
000142  b296              UXTH     r6,r2
000144  f7fffffe          BL       AT24CXX_ReadOneByte
000148  f8040b01          STRB     r0,[r4],#1
;;;113    		NumToRead--;
00014c  1e68              SUBS     r0,r5,#1
00014e  b285              UXTH     r5,r0
                  |L1.336|
000150  2d00              CMP      r5,#0                 ;110
000152  d1f4              BNE      |L1.318|
;;;114    	}
;;;115    }  
000154  bd70              POP      {r4-r6,pc}
;;;116    //在AT24CXX里面的指定地址开始写入指定个数的数据
                          ENDP

                  AT24CXX_Write PROC
;;;119    //NumToWrite:要写入数据的个数
;;;120    void AT24CXX_Write(u16 WriteAddr,u8 *pBuffer,u16 NumToWrite)
000156  b570              PUSH     {r4-r6,lr}
;;;121    {
000158  4605              MOV      r5,r0
00015a  460c              MOV      r4,r1
00015c  4616              MOV      r6,r2
;;;122    	while(NumToWrite--)
00015e  e006              B        |L1.366|
                  |L1.352|
;;;123    	{
;;;124    		AT24CXX_WriteOneByte(WriteAddr,*pBuffer);
000160  7821              LDRB     r1,[r4,#0]
000162  4628              MOV      r0,r5
000164  f7fffffe          BL       AT24CXX_WriteOneByte
;;;125    		WriteAddr++;
000168  1c68              ADDS     r0,r5,#1
00016a  b285              UXTH     r5,r0
;;;126    		pBuffer++;
00016c  1c64              ADDS     r4,r4,#1
                  |L1.366|
00016e  0030              MOVS     r0,r6                 ;122
000170  f1a60101          SUB      r1,r6,#1              ;122
000174  b28e              UXTH     r6,r1                 ;122
000176  d1f3              BNE      |L1.352|
;;;127    	}
;;;128    }
000178  bd70              POP      {r4-r6,pc}
;;;129    
                          ENDP

